{
	"info": {
		"_postman_id": "f4f7a9de-83e3-4de2-bdec-da170ce2f06e",
		"name": "Challenge Qik Franklin Sandoval",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4804205"
	},
	"item": [
		{
			"name": "Crear posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint posts para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint posts Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint posts solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint posts para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint posts usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint posts error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"userId\": \"{{userId}}\",\r\n        \"id\": \"{{id}}\",\r\n        \"title\": \"{{title}}\",\r\n        \"body\": \"{{body}}\",\r\n        \r\n    }"
				},
				"url": {
					"raw": "{{jsonplaceholder}}/posts/",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint posts para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");            \r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint posts Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint posts solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint posts para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint posts usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint posts error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{jsonplaceholder}}/posts/",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint posts para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint posts Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint posts solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint posts para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint posts usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint posts error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"userId\": \"{{userId}}\",\r\n        \"id\": \"{{id}}\",\r\n        \"title\": \"{{title}}\",\r\n        \"body\": \"{{body}}\",\r\n        \r\n    }"
				},
				"url": {
					"raw": "{{jsonplaceholder}}/posts/1",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint posts para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint posts Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint posts solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint posts para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint posts usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint posts error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"userId\": \"{{userId}}\",\r\n        \"id\": \"{{id}}\",\r\n        \"title\": \"{{title}}\",\r\n        \"body\": \"{{body}}\",\r\n        \r\n    }"
				},
				"url": {
					"raw": "{{jsonplaceholder}}/posts/",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint users para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint users Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint users solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint users para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint users usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint users error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{jsonplaceholder}}/users/10",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"users",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint users para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint users Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint users solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint users para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint users usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint users error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"userId\": \"{{userId}}\",\r\n        \"id\": \"{{id}}\",\r\n        \"title\": \"{{title}}\",\r\n        \"body\": \"{{body}}\",\r\n        \r\n    }"
				},
				"url": {
					"raw": "{{jsonplaceholder}}/users/",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint users para Obtener actualizar de forma exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint users Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint users solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint users para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint users usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint users error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{jsonplaceholder}}/comments/1",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar usuarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint users para eliminar exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint users Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint users solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint users para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint users usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint users error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"userId\": \"{{userId}}\",\r\n        \"id\": \"{{id}}\",\r\n        \"title\": \"{{title}}\",\r\n        \"body\": \"{{body}}\",\r\n        \r\n    }"
				},
				"url": {
					"raw": "{{jsonplaceholder}}/users/1",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener comentarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint posts para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"            pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint posts Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint posts solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint posts para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint posts usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint posts error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{jsonplaceholder}}/comments/1",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear comentarios",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function testResponse(responseCode) {\r",
							"    if (responseCode === 200) {\r",
							"        pm.test(\"Respuesta del endpoint posts para Obtener post exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(200);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"            pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"        });\r",
							"    } else if (responseCode === 201) {\r",
							"        pm.test(\"Respuesta del endpoint posts Creación exitosa\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(201);\r",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"            pm.expect(pm.response.json().id).to.be.a(\"number\");\r",
							"        });\r",
							"    } else if (responseCode === 400) {\r",
							"        pm.test(\"Respuesta del endpoint posts solicitud incorrecta (400)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(400);\r",
							"            pm.expect(pm.response.json().error).to.equal(\"Bad Request\");\r",
							"        });\r",
							"    } else if (responseCode === 404) {\r",
							"        pm.test(\"Respuesta del endpoint posts para obtener post inexistente\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(404);            \r",
							"        });\r",
							"    } else if (responseCode === 401) {\r",
							"        pm.test(\"Respuesta del endpoint posts usuario no autorizado\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(401);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Unauthorized\");\r",
							"        });\r",
							"    } else if (responseCode === 500) {\r",
							"        pm.test(\"Respuesta del endpoint posts error en el servidor)\", function () {\r",
							"            pm.expect(pm.response.code).to.equal(500);\r",
							"            pm.expect(pm.response.json().message).to.equal(\"Internal Server Error\");\r",
							"        });\r",
							"    } else {\r",
							"        console.log(\"Código de respuesta no manejado: \" + responseCode);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"No se presentaron errores\", function () {\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"\r",
							"// Llamada a la función para diferentes códigos de respuesta\r",
							"testResponse(200);\r",
							"testResponse(201);\r",
							"testResponse(400);\r",
							"testResponse(404);\r",
							"testResponse(401);\r",
							"testResponse(500);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"postId\": 1,\r\n        \"id\": 1,\r\n        \"name\": \"id labore ex et quam laborum\",\r\n        \"email\": \"Eliseo@gardner.biz\",\r\n        \"body\": \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\r\n    }"
				},
				"url": {
					"raw": "{{jsonplaceholder}}/comments/",
					"host": [
						"{{jsonplaceholder}}"
					],
					"path": [
						"comments",
						""
					]
				}
			},
			"response": []
		}
	]
}